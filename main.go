package main

import (
	"bytes"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"mime/multipart"
	"net/http"
	"net/textproto"
	"os"
	"strings"
	"sync"
	"time"

	"github.com/joho/godotenv"
	"github.com/sashabaranov/go-openai"
	tele "gopkg.in/telebot.v3"
)

var (
	bot                *tele.Bot
	userStates         = make(map[int64]*UserState)
	userStatesMu       sync.RWMutex
	OPENROUTER_API_KEY string
	KANDINSKY_API_KEY  string
	KANDINSKY_SECRET   string
	KANDINSKY_URL      string
)

type UserState struct {
	Name         string
	BirthDate    string
	Question     string
	Mode         string
	PartnerName  string
	PartnerBirth string
	Step         int
}

func init() {
	// –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
	OPENROUTER_API_KEY = os.Getenv("OPENROUTER_API_KEY")
	KANDINSKY_API_KEY = os.Getenv("KANDINSKY_API_KEY")
	KANDINSKY_SECRET = os.Getenv("KANDINSKY_SECRET")
	KANDINSKY_URL = os.Getenv("KANDINSKY_URL")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
	if OPENROUTER_API_KEY == "" {
		log.Printf("–í–ù–ò–ú–ê–ù–ò–ï: OPENROUTER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	}
}

type KandinskyGenerateRequest struct {
	Type           string `json:"type"`
	NumImages      int    `json:"numImages"`
	Width          int    `json:"width"`
	Height         int    `json:"height"`
	GenerateParams struct {
		Query string `json:"query"`
	} `json:"generateParams"`
}

type KandinskyStatusResponse struct {
	UUID     string   `json:"uuid"`
	Status   string   `json:"status"`
	Images   []string `json:"images"`
	Error    string   `json:"errorDescription"`
	Censored bool     `json:"censored"`
}

func main() {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
	if os.Getenv("TELEGRAM_BOT_TOKEN") == "" {
		// –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å .env —Ñ–∞–π–ª
		if err := godotenv.Load(); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞: %v", err)
		}
	}

	botToken := os.Getenv("TELEGRAM_BOT_TOKEN")
	if botToken == "" {
		log.Fatal("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö API –∫–ª—é—á–µ–π
	if OPENROUTER_API_KEY == "" {
		log.Fatal("OPENROUTER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	}

	pref := tele.Settings{
		Token: botToken,
	}

	bot, err := tele.NewBot(pref)
	if err != nil {
		log.Fatal(err)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	port := os.Getenv("PORT")
	if port == "" {
		port = "8080"
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
	go startServer(port)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
	log.Println("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
	bot.Start()
}

func modeButtons() *tele.ReplyMarkup {
	menu := &tele.ReplyMarkup{ResizeKeyboard: true}
	btnLove := menu.Data("üíñ –õ—é–±–æ–≤—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è", "love")
	btnHealth := menu.Data("üåø –ó–¥–æ—Ä–æ–≤—å–µ", "health")
	btnCareer := menu.Data("üí∞ –ö–∞—Ä—å–µ—Ä–∞ –∏ –¥–µ–Ω—å–≥–∏", "career")
	btnDecision := menu.Data("üåÄ –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π", "decision")
	menu.Inline(
		menu.Row(btnLove),
		menu.Row(btnHealth),
		menu.Row(btnCareer),
		menu.Row(btnDecision),
	)
	return menu
}

func isValidDate(date string) bool {
	_, err := time.Parse("02.01.2006", date)
	return err == nil
}

func getPrediction(question string, cards []string) (string, error) {
	config := openai.DefaultConfig(OPENROUTER_API_KEY)
	config.BaseURL = "https://openrouter.ai/api/v1"
	client := openai.NewClientWithConfig(config)

	// –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º –≤–æ–ø—Ä–æ—Å–∞ –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
	prompt := fmt.Sprintf(`–¢—ã - –æ–ø—ã—Ç–Ω–∞—è –≥–∞–¥–∞–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö –¢–∞—Ä–æ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: "%s"
–í—ã–ø–∞–≤—à–∏–µ –∫–∞—Ä—Ç—ã: %s

–°–¥–µ–ª–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ:
1. –ù–∞–ø—Ä—è–º—É—é –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
2. –£—á–∏—Ç—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∂–¥–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã
3. –û–±—ä—è—Å–Ω—è–µ—Ç, –∫–∞–∫ –∫–∞—Ä—Ç—ã —Å–≤—è–∑–∞–Ω—ã —Å –≤–æ–ø—Ä–æ—Å–æ–º
4. –î–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
1. –ö—Ä–∞—Ç–∫–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ, —Å–≤—è–∑—ã–≤–∞—é—â–µ–µ –≤–æ–ø—Ä–æ—Å —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏
2. –ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤–æ–ø—Ä–æ—Å–∞
3. –û–±—â–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ, –æ–±—ä–µ–¥–∏–Ω—è—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–∞—Ä—Ç
4. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–ü–∏—à–∏ –∂–∏–≤—ã–º, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º —è–∑—ã–∫–æ–º, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º.`, question, strings.Join(cards, ", "))

	resp, err := client.CreateChatCompletion(
		context.Background(),
		openai.ChatCompletionRequest{
			Model: "openai/gpt-4",
			Messages: []openai.ChatCompletionMessage{
				{
					Role:    openai.ChatMessageRoleSystem,
					Content: "–¢—ã - –æ–ø—ã—Ç–Ω–∞—è –≥–∞–¥–∞–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö –¢–∞—Ä–æ —Å –≥–ª—É–±–æ–∫–∏–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é –¥–∞–≤–∞—Ç—å —Ç–æ—á–Ω—ã–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.",
				},
				{
					Role:    openai.ChatMessageRoleUser,
					Content: prompt,
				},
			},
			Temperature: 0.7,
			MaxTokens:   1000,
		},
	)

	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: %v", err)
	}

	if len(resp.Choices) == 0 {
		return "", fmt.Errorf("–Ω–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏")
	}

	return resp.Choices[0].Message.Content, nil
}

func generateKandinskyImage(prompt string) ([]byte, error) {
	log.Printf("–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: %s", prompt)

	uuid, err := createGenerationTask(prompt)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: %v", err)
	}

	images, err := checkGenerationStatus(uuid)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: %v", err)
	}

	decoded, err := base64.StdEncoding.DecodeString(images[0])
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è base64: %v", err)
	}

	log.Printf("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ, —Ä–∞–∑–º–µ—Ä: %d –±–∞–π—Ç", len(decoded))
	return decoded, nil
}

func createGenerationTask(prompt string) (string, error) {
	params := KandinskyGenerateRequest{
		Type:      "GENERATE",
		NumImages: 1,
		Width:     1024,
		Height:    1024,
		GenerateParams: struct {
			Query string `json:"query"`
		}{
			Query: prompt,
		},
	}

	paramsJSON, err := json.Marshal(params)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: %v", err)
	}

	body := &bytes.Buffer{}
	writer := multipart.NewWriter(body)

	paramsPart, err := writer.CreatePart(textproto.MIMEHeader{
		"Content-Disposition": []string{`form-data; name="params"`},
		"Content-Type":        []string{"application/json"},
	})
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—è params: %v", err)
	}
	if _, err := paramsPart.Write(paramsJSON); err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ params: %v", err)
	}

	if err := writer.WriteField("model_id", "4"); err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è model_id: %v", err)
	}

	writer.Close()

	req, err := http.NewRequest("POST", KANDINSKY_URL+"key/api/v1/text2image/run", body)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}

	req.Header.Set("Content-Type", writer.FormDataContentType())
	req.Header.Set("X-Key", fmt.Sprintf("Key %s", KANDINSKY_API_KEY))
	req.Header.Set("X-Secret", fmt.Sprintf("Secret %s", KANDINSKY_SECRET))

	client := &http.Client{Timeout: 30 * time.Second}
	resp, err := client.Do(req)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}
	defer resp.Body.Close()

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %v", err)
	}

	log.Printf("–û—Ç–≤–µ—Ç –æ—Ç Kandinsky API: %s", respBody)

	if resp.StatusCode != http.StatusOK && resp.StatusCode != http.StatusCreated {
		return "", fmt.Errorf("HTTP %d: %s", resp.StatusCode, respBody)
	}

	var result struct {
		UUID string `json:"uuid"`
	}
	if err := json.Unmarshal(respBody, &result); err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %v", err)
	}

	return result.UUID, nil
}

func checkGenerationStatus(uuid string) ([]string, error) {
	backoff := 2 * time.Second
	maxAttempts := 10

	for attempt := 1; attempt <= maxAttempts; attempt++ {
		time.Sleep(backoff)
		backoff = time.Duration(float64(backoff) * 1.5)

		req, err := http.NewRequest("GET", KANDINSKY_URL+"key/api/v1/text2image/status/"+uuid, nil)
		if err != nil {
			return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v", err)
		}

		req.Header.Set("X-Key", fmt.Sprintf("Key %s", KANDINSKY_API_KEY))
		req.Header.Set("X-Secret", fmt.Sprintf("Secret %s", KANDINSKY_SECRET))

		client := &http.Client{Timeout: 10 * time.Second}
		resp, err := client.Do(req)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ %d): %v", attempt, err)
			continue
		}

		var statusResp KandinskyStatusResponse
		if err := json.NewDecoder(resp.Body).Decode(&statusResp); err != nil {
			resp.Body.Close()
			return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: %v", err)
		}
		resp.Body.Close()

		log.Printf("–°—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ %d): %s", attempt, statusResp.Status)

		switch statusResp.Status {
		case "DONE":
			return statusResp.Images, nil
		case "FAILED":
			return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ API: %s", statusResp.Error)
		case "CENSORED":
			return nil, fmt.Errorf("—Ü–µ–Ω–∑—É—Ä–∞: %t", statusResp.Censored)
		}
	}
	return nil, fmt.Errorf("–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (%d) –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ", maxAttempts)
}

func sendPredictionGradually(c tele.Context, prediction string) error {
	prediction = strings.ReplaceAll(prediction, `\n\n`, "\n\n")
	prediction = strings.ReplaceAll(prediction, `\n`, "\n")

	// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ —è–≤–Ω–æ–º—É —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—é \n\n***\n\n
	parts := strings.Split(prediction, "\n\n***\n\n")

	// –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —á–∞—Å—Ç–∏
	filteredParts := make([]string, 0, 3)
	for _, part := range parts {
		trimmed := strings.TrimSpace(part)
		if trimmed != "" {
			filteredParts = append(filteredParts, trimmed)
		}
	}

	// –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ \n\n***\n\n –Ω–µ –¥–∞–ª–æ —Ç—Ä—ë—Ö —á–∞—Å—Ç–µ–π, –¥–µ–ª–∏–º —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é
	if len(filteredParts) != 3 {
		log.Printf("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π –ø–æ—Å–ª–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ *** (%d): %v", len(filteredParts), filteredParts)
		// –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∞–±–∑–∞—Ü—ã –ø–æ \n\n
		paragraphs := strings.Split(prediction, "\n\n")
		filteredParts = make([]string, 0, 3)
		for _, para := range paragraphs {
			trimmed := strings.TrimSpace(para)
			if trimmed != "" {
				filteredParts = append(filteredParts, trimmed)
			}
		}

		// –ï—Å–ª–∏ –∞–±–∑–∞—Ü–µ–≤ –º–µ–Ω—å—à–µ 3 –∏–ª–∏ –±–æ–ª—å—à–µ, –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –∏—Ö –≤ —Ç—Ä–∏ —á–∞—Å—Ç–∏
		if len(filteredParts) != 3 {
			log.Printf("–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∞–±–∑–∞—Ü–∞–º –¥–∞–ª–æ %d —á–∞—Å—Ç–µ–π: %v", len(filteredParts), filteredParts)
			adjustedParts := make([]string, 3)
			totalParagraphs := len(filteredParts)
			if totalParagraphs == 0 {
				adjustedParts[0] = "–¢—É–º–∞–Ω —Å–∫—Ä—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ —Ç–≤–æ–µ–≥–æ –ø—É—Ç–∏, –Ω–æ –∑–≤–µ–∑–¥—ã —à–µ–ø—á—É—Ç –æ –ø–µ—Ä–µ–º–µ–Ω–∞—Ö..."
				adjustedParts[1] = "–¢–≤–æ–π –ø—É—Ç—å –ø–æ–∫–∞ –Ω–µ—è—Å–µ–Ω, –Ω–æ –Ω–∞–¥–µ–∂–¥–∞ —Å–∏—è–µ—Ç –≤–ø–µ—Ä–µ–¥–∏..."
				adjustedParts[2] = "–ë—É–¥—É—â–µ–µ —Ç–∞–∏—Ç –∑–∞–≥–∞–¥–∫–∏, –Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞ –±–ª–∏–∑–∫–æ..."
			} else {
				// –î–µ–ª–∏–º –∞–±–∑–∞—Ü—ã –ø—Ä–∏–º–µ—Ä–Ω–æ –ø–æ—Ä–æ–≤–Ω—É
				third := totalParagraphs / 3
				if third == 0 {
					third = 1
				}
				start := 0
				for i := 0; i < 3 && start < totalParagraphs; i++ {
					end := start + third
					if i == 2 || end > totalParagraphs {
						end = totalParagraphs
					}
					adjustedParts[i] = strings.Join(filteredParts[start:end], "\n\n")
					start = end
				}
				// –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –ø—É—Å—Ç—ã–µ —á–∞—Å—Ç–∏, –∑–∞–ø–æ–ª–Ω—è–µ–º –∏—Ö
				for i := range adjustedParts {
					if adjustedParts[i] == "" {
						switch i {
						case 0:
							adjustedParts[i] = "–¢—É–º–∞–Ω —Å–∫—Ä—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ —Ç–≤–æ–µ–≥–æ –ø—É—Ç–∏, –Ω–æ –∑–≤–µ–∑–¥—ã —à–µ–ø—á—É—Ç –æ –ø–µ—Ä–µ–º–µ–Ω–∞—Ö..."
						case 1:
							adjustedParts[i] = "–¢–≤–æ–π –ø—É—Ç—å –ø–æ–∫–∞ –Ω–µ—è—Å–µ–Ω, –Ω–æ –Ω–∞–¥–µ–∂–¥–∞ —Å–∏—è–µ—Ç –≤–ø–µ—Ä–µ–¥–∏..."
						case 2:
							adjustedParts[i] = "–ë—É–¥—É—â–µ–µ —Ç–∞–∏—Ç –∑–∞–≥–∞–¥–∫–∏, –Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞ –±–ª–∏–∑–∫–æ..."
						}
					}
				}
			}
			filteredParts = adjustedParts
		}
	}

	log.Printf("–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: %v", filteredParts)

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è
	log.Printf("–û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è")
	if err := c.Send(fmt.Sprintf("üåô *–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å—É–¥—å–±—ã* üåô\n\n%s", filteredParts[0])); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è: %v", err)
		return err
	}
	time.Sleep(1 * time.Second)
	imgPrompt1 := generateImagePrompt(filteredParts[0])
	log.Printf("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–æ–º–ø—Ç–æ–º: %s", imgPrompt1)
	imgData, err := generateKandinskyImage(imgPrompt1)
	if err == nil {
		log.Printf("–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
		imgReader := bytes.NewReader(imgData)
		if err := c.Send(&tele.Photo{File: tele.FromReader(imgReader), Caption: "‚ú® –ö–∞—Ä—Ç—ã —Ä–∞—Å–∫—Ä—ã–≤–∞—é—Ç —Å–≤–æ–∏ —Ç–∞–π–Ω—ã..."}); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: %v", err)
		}
	} else {
		log.Printf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: %v", err)
		if err := c.Send("‚ú® –ö–∞—Ä—Ç—ã —Å–∫—Ä—ã—Ç—ã —Ç—É–º–∞–Ω–æ–º, –Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è..."); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–±–æ–µ –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: %v", err)
		}
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–∏
	time.Sleep(1 * time.Second)
	log.Printf("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–∏")
	if err := c.Send(fmt.Sprintf("üåü *–ü—É—Ç—å —Ç–≤–æ–µ–π —Å—É–¥—å–±—ã* üåü\n\n%s", filteredParts[1])); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–∏: %v", err)
		return err
	}
	time.Sleep(1 * time.Second)
	imgPrompt2 := generateImagePrompt(filteredParts[1])
	log.Printf("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ç–æ—Ä–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–æ–º–ø—Ç–æ–º: %s", imgPrompt2)
	imgData, err = generateKandinskyImage(imgPrompt2)
	if err == nil {
		log.Printf("–û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
		imgReader := bytes.NewReader(imgData)
		if err := c.Send(&tele.Photo{File: tele.FromReader(imgReader), Caption: "üåå –¢–∞—Ä–æ —à–µ–ø—á–µ—Ç –æ –≥—Ä—è–¥—É—â–µ–º..."}); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: %v", err)
		}
	} else {
		log.Printf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Ç–æ—Ä–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: %v", err)
		if err := c.Send("üåå –ö–∞—Ä—Ç—ã –º–æ–ª—á–∞—Ç, –Ω–æ –∑–≤–µ–∑–¥—ã –≥–æ–≤–æ—Ä—è—Ç..."); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–±–æ–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: %v", err)
		}
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π
	time.Sleep(1 * time.Second)
	log.Printf("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è")
	if err := c.Send(fmt.Sprintf("üåÄ *–†–∞–∑–º—ã—à–ª–µ–Ω–∏—è –æ –±—É–¥—É—â–µ–º* üåÄ\n\n%s", filteredParts[2])); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–ª—é—á–µ–Ω–∏—è: %v", err)
		return err
	}
	log.Printf("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
	return nil
}

func generateImagePrompt(text string) string {
	taroCards := map[string]string{
		"The Fool":            "A whimsical fool dancing under a bright sky with mystical symbols",
		"The Magician":        "A powerful magician casting spells with glowing tarot cards",
		"The High Priestess":  "A mysterious priestess in a moonlit temple surrounded by secrets",
		"The Empress":         "A radiant empress in a lush garden with golden light",
		"The Emperor":         "A stern emperor on a throne with fiery skies",
		"The Hierophant":      "A wise priest in a sacred hall with glowing scrolls",
		"The Lovers":          "Two lovers under a starry sky with mystical intertwining fates",
		"The Chariot":         "A warrior in a chariot charging through a cosmic battlefield",
		"Strength":            "A gentle figure taming a lion under a golden sun",
		"The Hermit":          "A lone hermit with a lantern in a foggy night",
		"Wheel of Fortune":    "A spinning wheel of fate under a cosmic sky",
		"Justice":             "A figure with scales and a sword in a hall of light",
		"The Hanged Man":      "A figure hanging upside down in a mystical glow",
		"Death":               "A skeletal figure in a dark misty landscape with renewal symbols",
		"Temperance":          "An angelic figure blending water under a rainbow",
		"The Devil":           "A chained figure under a fiery pentagram",
		"The Tower":           "A crumbling tower struck by lightning in a stormy night",
		"The Star":            "A serene figure under a starry sky pouring water into a glowing pool",
		"The Moon":            "A moonlit scene with howling wolves and mysterious shadows",
		"The Sun":             "A bright sun illuminating a joyful child in a golden field",
		"Judgement":           "Figures rising from graves under a trumpet's call",
		"The World":           "A dancer in a cosmic circle with glowing symbols",
		"Ace of Wands":        "A glowing wand igniting flames in a mystical void",
		"Two of Wands":        "A figure holding two wands overlooking a fiery horizon",
		"Three of Wands":      "A figure watching ships sail under a blazing sky",
		"Four of Wands":       "A celebration with four wands under a golden arch",
		"Five of Wands":       "Five figures clashing with wands in a stormy scene",
		"Six of Wands":        "A victorious rider with a wand crowned in laurels",
		"Seven of Wands":      "A figure defending with a wand against shadows",
		"Eight of Wands":      "Eight wands flying through a fiery sky",
		"Nine of Wands":       "A weary figure guarding with nine wands",
		"Ten of Wands":        "A burdened figure carrying ten wands in a dim light",
		"Page of Wands":       "A young explorer with a wand in a blazing field",
		"Knight of Wands":     "A knight charging with a wand through flames",
		"Queen of Wands":      "A queen with a wand seated in a fiery throne",
		"King of Wands":       "A king with a wand ruling over a burning landscape",
		"Ace of Cups":         "A glowing chalice overflowing with mystical water",
		"Two of Cups":         "Two figures sharing cups under a gentle sky",
		"Three of Cups":       "Three figures dancing with cups in a joyful scene",
		"Four of Cups":        "A figure ignoring four cups under a cloudy sky",
		"Five of Cups":        "A figure mourning over spilled cups in a dark mist",
		"Six of Cups":         "Children exchanging cups in a nostalgic glow",
		"Seven of Cups":       "A figure dreaming of seven cups in a misty vision",
		"Eight of Cups":       "A figure walking away from eight cups under a moon",
		"Nine of Cups":        "A satisfied figure with nine cups in a golden light",
		"Ten of Cups":         "A family under a rainbow with ten cups",
		"Page of Cups":        "A young dreamer with a cup by a serene river",
		"Knight of Cups":      "A knight offering a cup on a misty shore",
		"Queen of Cups":       "A queen with a cup seated by a tranquil sea",
		"King of Cups":        "A king with a cup ruling over calm waters",
		"Ace of Swords":       "A glowing sword piercing a stormy sky",
		"Two of Swords":       "A blindfolded figure with two crossed swords",
		"Three of Swords":     "A heart pierced by three swords in a rainy scene",
		"Four of Swords":      "A resting figure with four swords in a quiet tomb",
		"Five of Swords":      "A victor with five swords in a tense battlefield",
		"Six of Swords":       "A boat with six swords crossing a misty river",
		"Seven of Swords":     "A figure sneaking away with seven swords",
		"Eight of Swords":     "A bound figure surrounded by eight swords",
		"Nine of Swords":      "A figure in despair with nine swords overhead",
		"Ten of Swords":       "A fallen figure pierced by ten swords under a dark sky",
		"Page of Swords":      "A young spy with a sword in a windy field",
		"Knight of Swords":    "A knight charging with a sword through a storm",
		"Queen of Swords":     "A queen with a sword seated in a clear sky",
		"King of Swords":      "A king with a sword ruling from a stormy throne",
		"Ace of Pentacles":    "A glowing pentacle in a fertile garden",
		"Two of Pentacles":    "A juggler balancing two pentacles by the sea",
		"Three of Pentacles":  "A craftsman working with three pentacles",
		"Four of Pentacles":   "A miser clutching four pentacles in a dim vault",
		"Five of Pentacles":   "Two beggars under five pentacles in a snowy night",
		"Six of Pentacles":    "A generous figure giving six pentacles",
		"Seven of Pentacles":  "A farmer tending seven pentacles in a field",
		"Eight of Pentacles":  "A worker crafting eight pentacles",
		"Nine of Pentacles":   "A lady with nine pentacles in a lush vineyard",
		"Ten of Pentacles":    "A family with ten pentacles in a golden estate",
		"Page of Pentacles":   "A young scholar with a pentacle in a green field",
		"Knight of Pentacles": "A knight with a pentacle riding through farmland",
		"Queen of Pentacles":  "A queen with a pentacle seated in a garden",
		"King of Pentacles":   "A king with a pentacle ruling over a golden land",
	}

	for card, description := range taroCards {
		if strings.Contains(strings.ToLower(text), strings.ToLower(card)) {
			return description + ", mystical tarot style, glowing ethereal atmosphere"
		}
	}

	switch {
	case strings.Contains(strings.ToLower(text), "–æ–≥–æ–Ω—å") || strings.Contains(strings.ToLower(text), "fire"):
		return "A fiery tarot card glowing with mystical flames in a dark void"
	case strings.Contains(strings.ToLower(text), "–º–æ—Ä–µ") || strings.Contains(strings.ToLower(text), "sea"):
		return "A tarot card with a turbulent sea under a stormy sky, mystical glow"
	case strings.Contains(strings.ToLower(text), "–∑–≤–µ–∑–¥—ã") || strings.Contains(strings.ToLower(text), "stars"):
		return "A tarot card with a starry night sky and glowing celestial symbols"
	case strings.Contains(strings.ToLower(text), "–ª—é–±–æ–≤—å") || strings.Contains(strings.ToLower(text), "love"):
		return "A tarot card with two entwined figures under a glowing heart, mystical aura"
	default:
		return "A mystical tarot card with swirling fates and ethereal light in a dark room"
	}
}
